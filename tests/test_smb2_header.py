#!/usr/bin/env python
# coding: utf-8

from smb2.header import Header

negotiate_protocol_req_buf = bytearray([
    0x00, 0x00, 0x00, 0x6a,

    0xfe, 0x53, 0x4d, 0x42,  0x40, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x1f, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0xff, 0xfe, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

    0x24, 0x00, 0x03, 0x00,  0x01, 0x00, 0x00, 0x00,
    0x7f, 0x00, 0x00, 0x00,  0x80, 0xaf, 0x0c, 0x35,
    0x0a, 0xf3, 0xe8, 0x11,  0x94, 0x06, 0x00, 0x0c,
    0x29, 0x59, 0x2d, 0x24,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x02, 0x02, 0x10, 0x02,
    0x00, 0x03
])

create_req_buf = bytearray([
    0x00, 0x00, 0x01, 0x50,

    0xfe, 0x53, 0x4d, 0x42,  0x40, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x05, 0x00, 0x0a, 0x00,
    0x08, 0x00, 0x00, 0x00,  0xe8, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x18, 0x03, 0x00, 0x00,  0x05, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x6c,  0x00, 0xc0, 0x00, 0x00,
    0x97, 0xea, 0x10, 0xe3,  0x63, 0x4d, 0xb7, 0x93,
    0x0d, 0xfc, 0xfc, 0x41,  0x5f, 0x66, 0x31, 0x6e,
    
    0x39, 0x00, 0x00, 0xff,  0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x78, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00,  0x68, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00,  0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x18, 0x00,  0x34, 0x00, 0x00, 0x00,
    0x52, 0x71, 0x4c, 0x73,  0x00, 0x00, 0x00, 0x00,
    0x60, 0xbb, 0x90, 0xca,  0x7e, 0x95, 0x49, 0x2e,
    0x8c, 0xd7, 0xae, 0x90,  0xe9, 0x4f, 0xee, 0x5c,
    0x01, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,
    0x51, 0x46, 0x69, 0x64,  0x00, 0x00, 0x00, 0x00
])


def main():
    print('Decode and re-encode a NegotiateProtocol Header #1')
    a = Header()
    hdr = a.decode(negotiate_protocol_req_buf[4:4 + 64])
    buf = a.encode(hdr)

    if negotiate_protocol_req_buf[4:4 + 64] != buf:
        print('Re-encoded header content mismatch')
        print('Original', negotiate_protocol_req_buf[4:4 + 64])
        print('Encoded ', buf)
        exit(1)

    print('Decode and re-encode a Create Header #2')
    a = Header()
    hdr = a.decode(create_req_buf[4:4 + 64])
    buf = a.encode(hdr)

    if create_req_buf[4:4 + 64] != buf:
        print('Re-encoded header content mismatch')
        print('Original', create_req_buf[4:4 + 64])
        print('Encoded ', buf)
        exit(1)
        
if __name__ == "__main__":
    main()
