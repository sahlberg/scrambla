#!/usr/bin/env python
# coding: utf-8

from smb2.header import Direction
from smb2.read import Read

read_req_buf_1 = bytes([
    0x00, 0x00, 0x00, 0x78,

    0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xfe, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x31, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
])

read_rep_buf_1 = bytes([
    0x00, 0x00, 0x00, 0x5d,

    0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xfe, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    0x11, 0x00, 0x50, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f,
    0x72, 0x6c, 0x64, 0x0d, 0x0a
])

def pr(buf):
    pos = 0
    for i in buf:
        print("%02x " % i, end='')
        pos = pos + 1
        if pos == 8:
            print(' ', end='')
        if pos == 16:
            pos = 0
            print('')
    print()

def main():
    print('Decode and re-encode a Read Request #1')
    r = Read()
    cmd = r.decode(Direction.REQUEST, read_req_buf_1[4 + 64:])
    buf = r.encode(Direction.REQUEST, cmd)

    if read_req_buf_1[4 + 64:] != buf:
        print('Re-encoded content mismatch')
        print('Original:')
        pr(read_req_buf_1[4 + 64:])
        print('Encoded:')
        pr(buf)
        exit(1)

    print('Decode and re-encode a Read Reply #1')
    r = Read()
    cmd = r.decode(Direction.REPLY, read_rep_buf_1[4 + 64:])
    buf = r.encode(Direction.REPLY, cmd)

    if read_rep_buf_1[4 + 64:] != buf:
        print('Re-encoded content mismatch')
        print('Original:')
        pr(read_rep_buf_1[4 + 64:])
        print('Encoded:')
        pr(buf)
        exit(1)

if __name__ == "__main__":
    main()
