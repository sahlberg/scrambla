#!/usr/bin/env python
# coding: utf-8

from smb2.header import Direction
from smb2.create import Create

create_req_buf_1 = bytes([
    0x00, 0x00, 0x01, 0x50,

    0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00,
    0x08, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x6c, 0x00, 0xc0, 0x00, 0x00,
    0x97, 0xea, 0x10, 0xe3, 0x63, 0x4d, 0xb7, 0x93,
    0x0d, 0xfc, 0xfc, 0x41, 0x5f, 0x66, 0x31, 0x6e,
    
    0x39, 0x00, 0x00, 0xff, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x52, 0x71, 0x4c, 0x73, 0x00, 0x00, 0x00, 0x00,
    0x60, 0xbb, 0x90, 0xca, 0x7e, 0x95, 0x49, 0x2e,
    0x8c, 0xd7, 0xae, 0x90, 0xe9, 0x4f, 0xee, 0x5c,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x51, 0x46, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00
])

create_rep_buf_1 = bytes([
    0x00, 0x00, 0x01, 0xd0,

    0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x6c, 0x00, 0xc0, 0x00, 0x00,
    0xfb, 0x33, 0xc2, 0x18, 0x30, 0x12, 0xca, 0x56,
    0xf5, 0x65, 0x96, 0x59, 0x55, 0x45, 0x70, 0xe7,

    0x59, 0x00, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x5c, 0x2b, 0x35, 0x43, 0xb4, 0x40, 0xd3, 0x01,
    0x43, 0x23, 0x9f, 0x70, 0x0c, 0xa9, 0xd6, 0x01,
    0x43, 0x23, 0x9f, 0x70, 0x0c, 0xa9, 0xd6, 0x01,
    0x43, 0x23, 0x9f, 0x70, 0x0c, 0xa9, 0xd6, 0x01,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb6, 0x19, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x98, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x52, 0x71, 0x4c, 0x73, 0x00, 0x00, 0x00, 0x00,
    0x60, 0xbb, 0x90, 0xca, 0x7e, 0x95, 0x49, 0x2e,
    0x8c, 0xd7, 0xae, 0x90, 0xe9, 0x4f, 0xee, 0x5c,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x51, 0x46, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00,
    0x95, 0x9d, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00,
    0x30, 0x10, 0x10, 0xe3, 0x81, 0xd9, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])


def pr(buf):
    for i in buf:
        print("%02x " % i, end='')
    print()

def main():
    print('Decode and re-encode a Create Request #1')
    c = Create()
    cmd = c.decode(Direction.REQUEST, create_req_buf_1[4 + 64:])
    buf = c.encode(Direction.REQUEST, cmd)

    if create_req_buf_1[4 + 64:] != buf:
        print('Re-encoded content mismatch')
        print('Original:')
        pr(create_req_buf_1[4 + 64:])
        print('Encoded:')
        pr(buf)
        exit(1)

    print('Decode and re-encode a Create Reply #1')
    c = Create()
    cmd = c.decode(Direction.REPLY, create_rep_buf_1[4 + 64:])
    buf = c.encode(Direction.REPLY, cmd)

    if create_rep_buf_1[4 + 64:] != buf:
        print('Re-encoded content mismatch')
        print('Original:')
        pr(create_rep_buf_1[4 + 64:])
        print('Encoded:')
        pr(buf)
        exit(1)


if __name__ == "__main__":
    main()
